{"version":3,"sources":["app/Scanner.tsx","app/App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["VisSwitcher","children","useState","visible","setVisible","useEffect","onVisChange","document","visibilityState","addEventListener","removeEventListener","Scanner","video","useRef","inputDevices","setInputDevices","selectedDevice","setSelectedDevice","text","setText","error","setError","codeReader","useMemo","BrowserQRCodeReader","listVideoInputDevices","then","videoInputDevices","length","catch","e","toString","controls","current","decodeFromVideoDevice","deviceId","result","message","getText","cls","stop","style","color","display","flexDirection","alignItems","justifyContent","padding","map","d","onClick","label","width","height","borderStyle","borderWidth","borderColor","ref","WrappedScanner","App","className","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"6OAGMA,EAAwB,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SAC5B,EAA8BC,oBAAkB,GAAhD,mBAAOC,EAAP,KAAgBC,EAAhB,KAWA,OAVAC,qBAAU,WACN,IAAMC,EAAc,WAChBF,EAAwC,YAA7BG,SAASC,kBAGxB,OADAD,SAASE,iBAAiB,mBAAoBH,GACvC,WACHC,SAASG,oBAAoB,mBAAoBJ,OAIlDH,EAAU,yCAAIF,EAAJ,OAAmB,MAGlCU,EAAU,WACZ,IAAMC,EAAQC,iBAAyB,MACvC,EAAwCX,mBAA4B,IAApE,mBAAOY,EAAP,KAAqBC,EAArB,KACA,EAA4Cb,qBAA5C,mBAAOc,EAAP,KAAuBC,EAAvB,KACA,EAAwBf,mBAAiB,IAAzC,mBAAOgB,EAAP,KAAaC,EAAb,KACA,EAA0BjB,mBAAiB,IAA3C,mBAAOkB,EAAP,KAAcC,EAAd,KACMC,EAAaC,mBAAQ,WACvB,OAAO,IAAIC,wBACZ,IAoCH,OAlCAnB,qBAAU,WACNmB,sBAAoBC,wBAAwBC,MAAK,SAACC,GACvCA,GAAqBA,EAAkBC,SACtCb,EAAgBY,GAChBV,EAAkBU,EAAkB,QAEzCE,OAAM,SAAAC,GACLT,EAASS,EAAEC,iBAEpB,IAEH1B,qBAAU,WAEF,IAAI2B,EADR,GAAGV,GAAcN,GAAmC,MAAjBJ,EAAMqB,QAcrC,OAXAX,EACCY,sBAAsBlB,EAAemB,SAAUvB,EAAMqB,SAAS,SAAUG,EAAQhB,GAC1EA,EACCC,EAASD,EAAMiB,SACTD,GACNjB,EAAQiB,EAAOE,cAEpBZ,MAAK,SAAAa,GACJP,EAAWO,KAGR,WACCP,GACAA,EAASQ,UAItB,CAAClB,EAAYN,IAGZ,qCACKI,GAAS,sBAAKqB,MAAO,CAACC,MAAO,OAApB,cAA8BtB,EAA9B,OACV,qBAAKqB,MAAO,CAACE,QAAS,OAAQC,cAAe,MAAOC,WAAY,SAAUC,eAAgB,SAAUC,QAAS,QAA7G,SACKjC,EAAakC,KAAI,SAAAC,GACd,OAAO,wBAAQC,QAAS,WACpBjC,EAAkBgC,IADf,SAEcA,EAAEE,OAAfF,EAAEd,eAGlB,uBACIM,MAAO,CAACW,MAAO,OAAQC,OAAQ,OAAQC,YAAa,SAAUC,YAAa,EAAGC,YAAa,OAC3FC,IAAK7C,IAET,8BAAMM,QAOHwC,EAFQ,kBAAM,cAAC,EAAD,UAAa,cAAC,EAAD,OCpE3BC,MATf,WACE,OACE,sBAAKC,UAAU,MAAf,UACE,qCACA,cAAC,EAAD,QCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCfnC,IAYeC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqB1C,MAAK,YAAkD,IAA/C2C,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCFdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFrE,SAASsE,eAAe,SFyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtD,MAAK,SAACuD,GACLA,EAAaC,gBAEdrD,OAAM,SAACT,GACN+D,QAAQ/D,MAAMA,EAAMiB,YEpH5B6B,M","file":"static/js/main.9e7ebdcf.chunk.js","sourcesContent":["import React, {useRef, useEffect, useState, useMemo} from 'react';\nimport {BrowserQRCodeReader, IScannerControls} from '@zxing/browser';\n\nconst VisSwitcher: React.FC = ({children}) => {\n    const [visible, setVisible] = useState<boolean>(true)\n    useEffect(()=>{\n        const onVisChange = () => {\n            setVisible(document.visibilityState === 'visible')\n          }\n        document.addEventListener('visibilitychange', onVisChange);\n        return () => {\n            document.removeEventListener('visibilitychange', onVisChange)\n        }\n    })\n\n    return visible ? <> {children} </>: null\n}\n\nconst Scanner = () => {\n    const video = useRef<HTMLVideoElement>(null);\n    const [inputDevices, setInputDevices] = useState<MediaDeviceInfo[]>([])\n    const [selectedDevice, setSelectedDevice] = useState<MediaDeviceInfo>()\n    const [text, setText] = useState<string>('')\n    const [error, setError] = useState<string>('')\n    const codeReader = useMemo(()=>{\n        return new BrowserQRCodeReader()\n    }, []);\n\n    useEffect(() => {\n        BrowserQRCodeReader.listVideoInputDevices().then((videoInputDevices) => {\n                if(videoInputDevices && videoInputDevices.length){\n                    setInputDevices(videoInputDevices)\n                    setSelectedDevice(videoInputDevices[0])\n                }\n            }).catch(e => {\n                setError(e.toString())\n            })\n    }, []);\n\n    useEffect(() => {\n        if(codeReader && selectedDevice && video.current != null){\n            let controls: IScannerControls;\n\n            codeReader\n            .decodeFromVideoDevice(selectedDevice.deviceId, video.current, function (result, error) {\n                if(error){\n                    setError(error.message)\n                }else if (result) {\n                    setText(result.getText())\n                }\n            }).then(cls => {\n                controls = cls;\n            })\n\n            return () => {\n                if (controls){\n                    controls.stop()\n                }\n            }\n        }\n    }, [codeReader, selectedDevice])\n\n    return (\n        <>\n            {error && <div style={{color: 'red'}}> {error} </div>}\n            <div style={{display: 'flex', flexDirection: 'row', alignItems: 'center', justifyContent: 'center', padding: '20px'}}>\n                {inputDevices.map(d => {\n                    return <button onClick={()=>{\n                        setSelectedDevice(d)\n                    }} key={d.deviceId}>{d.label}</button>\n                })}\n            </div>\n            <video\n                style={{width: '50vw', height: '50vh', borderStyle: 'dashed', borderWidth: 1, borderColor: 'red'}}\n                ref={video}\n            ></video>\n            <div>{text}</div>\n        </>\n    );\n}\n\nconst WrappedScanner = () => <VisSwitcher><Scanner/></VisSwitcher>\n\nexport default WrappedScanner","import React from 'react';\nimport './App.css';\nimport Scanner from './Scanner';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div>v3</div>\n      <Scanner/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app/App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}